// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //1. A Instruction Handling

    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=loadAtemp);
    Or(a= loadAtemp, b= instruction[5], out=loadA);   // A destination in C instruction
    ARegister(in=inA, load=loadA, out=outA);

    Or16(a=outA, b=false, out[0..14]=addressM, out[15]=ARegMSB);   // A register is 16 bits, we only need 15 bits

    //2. C instruction Handling

    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=aluInput1);
    Mux16(a=outA, b=inM, sel=instruction[12], out=aluInput2);
    ALU(x=aluInput1, y=aluInput2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=aluZr, ng=aluNg);

    Or16(a=aluOut, b=false, out=outM);
    
    //writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    //Jump/Control Logic
    
    //j1 - out<0
    And(a=instruction[2], b=aluNg, out=j1out);

    //j2 - out=0
    And(a=instruction[1], b=aluZr, out=j2out);

    //j3- out>0 - (out!=0 AND out>0)
    
    Not(in=aluZr, out=aluNotZr);
    Not(in=aluNg, out=aluPs);
    And(a=aluNotZr, b=aluPs, out=aluPositive);    
    And(a=instruction[0], b=aluPositive, out=j3out);

    //Determine the load for PC
    Or(a=j1out, b=j2out, out=j1orj2);
    Or(a=j1orj2, b=j3out, out=j1orj2orj3);

    //Jump only if C instruction
    And(a=j1orj2orj3, b=instruction[15], out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc, out[15]=pcMSB); //PC is 16 bit but we need only 15 bits



}